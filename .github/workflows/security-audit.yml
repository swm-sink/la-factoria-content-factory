name: Security Audit & Dependency Monitoring

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly security audit every Monday at 6 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      audit_level:
        description: 'Security audit level'
        required: false
        default: 'full'
        type: choice
        options:
          - 'dependencies-only'
          - 'code-only'
          - 'full'

jobs:
  dependency-security:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.audit_level != 'code-only' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit

      - name: Install project dependencies
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Run dependency vulnerability scan
        id: pip-audit
        run: |
          echo "## Dependency Security Audit Report" > audit-report.md
          echo "**Date**: $(date -u)" >> audit-report.md
          echo "**Branch**: ${{ github.ref_name }}" >> audit-report.md
          echo "**Commit**: ${{ github.sha }}" >> audit-report.md
          echo "" >> audit-report.md

          # Run pip-audit and capture output
          if pip-audit --desc --format=json > audit-results.json 2>&1; then
            echo "vulnerability_count=0" >> $GITHUB_OUTPUT
            echo "✅ **Status**: No vulnerabilities found" >> audit-report.md
          else
            # Count vulnerabilities from JSON output if available
            if [ -f audit-results.json ]; then
              vuln_count=$(cat audit-results.json | jq '.vulnerabilities | length' 2>/dev/null || echo "unknown")
              echo "vulnerability_count=$vuln_count" >> $GITHUB_OUTPUT
              echo "❌ **Status**: $vuln_count vulnerabilities found" >> audit-report.md
              echo "" >> audit-report.md
              echo "### Vulnerability Details" >> audit-report.md
              pip-audit --desc >> audit-report.md
            else
              echo "vulnerability_count=unknown" >> $GITHUB_OUTPUT
              echo "⚠️ **Status**: Audit failed - check logs" >> audit-report.md
            fi
          fi

      - name: Upload dependency audit report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit-report-${{ github.run_number }}
          path: |
            audit-report.md
            audit-results.json
          retention-days: 30

      - name: Fail on vulnerabilities
        if: steps.pip-audit.outputs.vulnerability_count != '0' && steps.pip-audit.outputs.vulnerability_count != 'unknown'
        run: |
          echo "❌ Security vulnerabilities found in dependencies!"
          echo "Please review the audit report and update vulnerable packages."
          exit 1

  code-security:
    name: Code Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.audit_level != 'dependencies-only' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety

      - name: Run Bandit security scan
        id: bandit
        run: |
          echo "## Code Security Scan Report" > security-report.md
          echo "**Tool**: Bandit" >> security-report.md
          echo "**Date**: $(date -u)" >> security-report.md
          echo "" >> security-report.md

          # Run bandit with JSON output for parsing
          if bandit -r app/ -f json -o bandit-results.json; then
            echo "bandit_issues=0" >> $GITHUB_OUTPUT
            echo "✅ **Bandit**: No security issues found" >> security-report.md
          else
            # Count issues from JSON output
            if [ -f bandit-results.json ]; then
              issue_count=$(cat bandit-results.json | jq '.results | length' 2>/dev/null || echo "unknown")
              echo "bandit_issues=$issue_count" >> $GITHUB_OUTPUT
              echo "⚠️ **Bandit**: $issue_count potential security issues found" >> security-report.md
              echo "" >> security-report.md
              echo "### Bandit Issues" >> security-report.md
              bandit -r app/ -f txt >> security-report.md || true
            fi
          fi

      - name: Run Safety check
        id: safety
        run: |
          echo "" >> security-report.md
          echo "### Safety Check (Known Vulnerabilities)" >> security-report.md

          if safety check --json > safety-results.json 2>&1; then
            echo "safety_issues=0" >> $GITHUB_OUTPUT
            echo "✅ **Safety**: No known vulnerabilities in installed packages" >> security-report.md
          else
            # Parse safety results
            if [ -f safety-results.json ]; then
              safety_count=$(cat safety-results.json | jq 'length' 2>/dev/null || echo "unknown")
              echo "safety_issues=$safety_count" >> $GITHUB_OUTPUT
              echo "❌ **Safety**: $safety_count known vulnerabilities found" >> security-report.md
              safety check >> security-report.md || true
            fi
          fi

      - name: Upload code security report
        uses: actions/upload-artifact@v4
        with:
          name: code-security-report-${{ github.run_number }}
          path: |
            security-report.md
            bandit-results.json
            safety-results.json
          retention-days: 30

      - name: Security summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Bandit Issues**: ${{ steps.bandit.outputs.bandit_issues }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Safety Issues**: ${{ steps.safety.outputs.safety_issues }}" >> $GITHUB_STEP_SUMMARY

  compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    needs: [dependency-security, code-security]
    if: always() && github.event_name == 'schedule'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create compliance report
        run: |
          echo "# Weekly Security Compliance Report" > compliance-report.md
          echo "**Week of**: $(date -u +%Y-%m-%d)" >> compliance-report.md
          echo "**Repository**: ${{ github.repository }}" >> compliance-report.md
          echo "" >> compliance-report.md

          echo "## Audit Status" >> compliance-report.md
          echo "- **Dependency Audit**: ${{ needs.dependency-security.result }}" >> compliance-report.md
          echo "- **Code Security Scan**: ${{ needs.code-security.result }}" >> compliance-report.md
          echo "" >> compliance-report.md

          echo "## Compliance Status" >> compliance-report.md
          if [[ "${{ needs.dependency-security.result }}" == "success" && "${{ needs.code-security.result }}" == "success" ]]; then
            echo "✅ **Overall Status**: COMPLIANT" >> compliance-report.md
            echo "All security checks passed successfully." >> compliance-report.md
          else
            echo "❌ **Overall Status**: NON-COMPLIANT" >> compliance-report.md
            echo "One or more security checks failed. Review audit reports." >> compliance-report.md
          fi

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report-${{ github.run_number }}
          path: compliance-report.md
          retention-days: 90

  # Notification job for failed security checks
  notify-security-failure:
    name: Security Failure Notification
    runs-on: ubuntu-latest
    needs: [dependency-security, code-security]
    if: failure() && (needs.dependency-security.result == 'failure' || needs.code-security.result == 'failure')
    steps:
      - name: Security alert
        run: |
          echo "🚨 SECURITY ALERT: Critical security issues detected!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action Required**: Review security audit reports and remediate issues immediately." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Artifacts**: Check workflow artifacts for detailed reports." >> $GITHUB_STEP_SUMMARY
