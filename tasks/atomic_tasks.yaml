# ================================================================================================
# AI CONTENT FACTORY - ATOMIC TASKS (FINAL CLEAN VERSION)
# ================================================================================================
#
# This file represents the complete, logically ordered development history of the AI Content Factory.
# Tasks are organized by development phases, balancing technical dependencies with practical workflow.
# All 94 tasks are included, deduplicated, and cross-referenced with meta tasks.
#
# Organization:
# Phase 1: Foundation & Project Setup (Tasks 001-007)
# Phase 2: Core Backend Development (Tasks 008-020)
# Phase 3: Infrastructure as Code (Tasks 021-040)
# Phase 4: Backend API Development (Tasks 041-055)
# Phase 5: Frontend Development (Tasks 056-065)
# Phase 6: AI Content Quality & Generation (Tasks 066-075)
# Phase 7: CI/CD & DevOps (Tasks 076-085)
# Phase 8: Testing & Quality Assurance (Tasks 086-091)
# Phase 9: Documentation & Final Polish (Tasks 092-094)
#
# ================================================================================================

# ================================================================================================
# PHASE 1: FOUNDATION & PROJECT SETUP
# ================================================================================================

- id: "001"
  original_id: "INFERRED-STRUCTURE-001"
  title: "Foundation: Basic Project Directory Structure"
  objective: "Establish the core project directory structure to organize code by concern (API, core, models, services, utils)."
  meta_task: "META-INFERRED-FOUNDATION"
  files: ["app/", "app/api/", "app/core/", "app/models/", "app/services/", "app/utils/", "tests/"]
  depends: []
  done_when: "The primary project directories (app, app/api, app/core, app/models, app/services, app/utils, tests) and their initial __init__.py files are created."
  status: done
  ai_ref: "AI-InferredTask-20240531"
  completion_notes: "Foundational project structure established for organized development."

- id: "002"
  original_id: "INFERRED-IGNOREFILES-001"
  title: "Foundation: Version Control & Docker Ignore Files"
  objective: "Set up .gitignore and .dockerignore files with common patterns for Python projects and Docker builds."
  meta_task: "META-INFERRED-FOUNDATION"
  files: [".gitignore", ".dockerignore"]
  depends: []
  done_when: ".gitignore and .dockerignore files are created with standard exclusions for Python and Docker."
  status: done
  ai_ref: "AI-InferredTask-20240531"
  completion_notes: "Version control and Docker build optimization files established."

- id: "003"
  original_id: "INFERRED-DOCKER-001"
  title: "Foundation: Initial Docker Containerization"
  objective: "Create an initial Dockerfile for containerizing the Python application, including base image selection, code copying, and dependency installation."
  meta_task: "META-INFERRED-FOUNDATION"
  files: ["Dockerfile", "requirements.txt"]
  depends: ["001"]
  done_when: "A basic Dockerfile exists that can build a container image for the application."
  status: done
  ai_ref: "AI-InferredTask-20240531"
  completion_notes: "Initial containerization capability established."

- id: "004"
  original_id: "INFERRED-FASTAPI-001"
  title: "Foundation: FastAPI Application Bootstrap"
  objective: "Establish the initial FastAPI application instance, including basic configuration loading and application entry point."
  meta_task: "META-INFERRED-FOUNDATION"
  files: ["app/main.py", "app/core/config/settings.py", ".env.example", "requirements.txt"]
  depends: ["001"]
  done_when: "A basic FastAPI application can be initialized, loads configuration, and is runnable via uvicorn."
  status: done
  ai_ref: "AI-InferredTask-20240531"
  completion_notes: "Core FastAPI application framework established."

- id: "005"
  original_id: "INFERRED-LOGGING-001"
  title: "Foundation: Core Logging Configuration"
  objective: "Establish a basic structured logging configuration for the application using Python's logging module."
  meta_task: "META-INFERRED-FOUNDATION"
  files: ["app/main.py"]
  depends: ["004"]
  done_when: "Basic logging is configured with default log level and format, outputting to console."
  status: done
  ai_ref: "AI-InferredTask-20240531"
  completion_notes: "Structured logging foundation established per project standards."

- id: "006"
  original_id: "INFERRED-ERRORHANDLING-001"
  title: "Foundation: Error Handling Framework"
  objective: "Implement a basic framework for custom error handling in the FastAPI application, including base exception classes and handlers."
  meta_task: "META-INFERRED-FOUNDATION"
  files: ["app/core/exceptions.py", "app/main.py"]
  depends: ["004"]
  done_when: "Base custom exception classes defined with FastAPI handlers returning structured error responses."
  status: done
  ai_ref: "AI-InferredTask-20240531"
  completion_notes: "Error handling framework aligned with project Rule H."

- id: "007"
  original_id: "INFERRED-PYDANTIC-001"
  title: "Foundation: Initial Pydantic Integration"
  objective: "Adopt Pydantic for data validation and serialization by creating initial basic Pydantic models for early API request/response schemas."
  meta_task: "META-INFERRED-FOUNDATION"
  files: ["app/models/pydantic/"]
  depends: ["004", "015"] # Depends on Pydantic version resolution
  done_when: "The project incorporates Pydantic with basic API endpoints using Pydantic models for validation and serialization."
  status: done
  ai_ref: "AI-InferredTask-20240531"
  completion_notes: "Pydantic foundation established for type-safe API development."

# ================================================================================================
# PHASE 2: CORE BACKEND DEVELOPMENT
# ================================================================================================

- id: "008"
  original_id: "ARCHIVE-SETTINGS-1.5"
  title: "Backend: Consolidate Application Settings"
  objective: "Consolidate all application settings into a single source of truth for better manageability and clarity."
  meta_task: "META-ARCHIVE-SETTINGS"
  files: ["app/core/config/settings.py"]
  depends: ["004"]
  done_when: "Application settings are centralized in app/core/config/settings.py, not scattered across the codebase."
  status: done
  ai_ref: "AI-EXECUTION-SESSION-20250527"
  completion_notes: "Settings centralization completed for improved maintainability."

- id: "009"
  original_id: "ARCHIVE-SETTINGS-1.6"
  title: "Backend: Remove Insecure Default API Keys"
  objective: "Enhance security by removing any default insecure API keys from the settings configuration."
  meta_task: "META-ARCHIVE-SETTINGS"
  files: ["app/core/config/settings.py"]
  depends: ["008"]
  done_when: "No hardcoded or default insecure API_KEY is present in app/core/config/settings.py."
  status: done
  ai_ref: "AI-EXECUTION-SESSION-20250527"
  completion_notes: "Security improved by removing default insecure credentials."

- id: "010"
  original_id: "ARCHIVE-SETTINGS-1.7"
  title: "Backend: Review Critical Settings"
  objective: "Verify the correctness and completeness of all critical application settings."
  meta_task: "META-ARCHIVE-SETTINGS"
  files: ["app/core/config/settings.py"]
  depends: ["009"]
  done_when: "All critical settings in app/core/config/settings.py have been reviewed and confirmed correct."
  status: done
  ai_ref: "AI-EXECUTION-SESSION-20250528"
  completion_notes: "Critical settings validation completed."

- id: "011"
  original_id: "ARCHIVE-SETTINGS-1.9"
  title: "Backend: Add Comprehensive Docstrings"
  objective: "Improve code maintainability and understanding by adding comprehensive Google-style docstrings to settings and secrets management modules."
  meta_task: "META-ARCHIVE-SETTINGS"
  files: ["app/core/config/settings.py", "app/core/security/secrets.py"]
  depends: ["010"]
  done_when: "Comprehensive Google-style docstrings added to all modules, classes, and functions."
  status: done
  ai_ref: "AI-EXECUTION-SESSION-20250528"
  completion_notes: "Documentation quality significantly improved."

- id: "012"
  original_id: "EP11.1"
  title: "Backend: Remove Flask Dependencies"
  objective: "Purge Flask artifacts and align unit tests with FastAPI to ensure clean architecture."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["requirements.txt", "requirements-dev.txt", "tests/unit/test_app.py"]
  depends: ["004"]
  done_when: "No Flask/Gunicorn dependencies remain. tests/unit/test_app.py uses FastAPI TestClient and passes."
  status: done
  ai_ref: "SESSION_PREVIOUS_FLASK_PURGE"
  completion_notes: "Clean migration from Flask to FastAPI completed."

- id: "013"
  original_id: "ARCHIVE-DEPCLEAN-3.1"
  title: "Backend: Resolve Pytest Version Conflicts"
  objective: "Resolve pytest version conflicts and standardize its usage within the project for consistent testing."
  meta_task: "META-ARCHIVE-DEPCLEAN"
  files: ["requirements-dev.txt", "pyproject.toml"]
  depends: ["012"]
  done_when: "Pytest version conflicts are resolved, and its usage is standardized across the project."
  status: done
  ai_ref: "AI-EXECUTION-SESSION-20250528"
  completion_notes: "Testing framework standardized and conflict-free."

- id: "014"
  original_id: "ARCHIVE-DEPCLEAN-3.3"
  title: "Backend: Separate Development Dependencies"
  objective: "Improve dependency management by separating development dependencies from production dependencies."
  meta_task: "META-ARCHIVE-DEPCLEAN"
  files: ["requirements.txt", "requirements-dev.txt"]
  depends: ["013"]
  done_when: "Development-specific dependencies are moved from requirements.txt to requirements-dev.txt."
  status: done
  ai_ref: "AI-EXECUTION-SESSION-20250528"
  completion_notes: "Clean separation between production and development dependencies."

- id: "015"
  original_id: "ARCHIVE-DEPCLEAN-3.2"
  title: "Backend: Migrate to Pydantic V2"
  objective: "Ensure the project uses Pydantic V2 and resolve any version conflicts with pydantic-settings."
  meta_task: "META-ARCHIVE-DEPCLEAN"
  files: ["requirements.txt", "requirements-dev.txt"]
  depends: ["014"]
  done_when: "Project dependencies updated to use Pydantic V2, and pydantic-settings versions are compatible."
  status: done
  ai_ref: "AI-EXECUTION-SESSION-20250528"
  completion_notes: "Successfully migrated to Pydantic V2 with resolved compatibility issues."

- id: "016"
  original_id: "DEV-6.4"
  title: "Backend: Python 3.13 Compatibility"
  objective: "Ensure Pydantic and Pydantic-core versions are compatible with Python 3.13 to avoid build issues."
  meta_task: "Next Sprint: SaaS Quality Enhancements & Product Features"
  files: ["requirements.txt", "requirements-dev.txt"]
  depends: ["015"]
  done_when: "Pydantic and pydantic-core versions compatible with Python 3.13 are pinned in requirements files."
  status: done
  ai_ref: "SESSION_PYDANTIC_PINNED"
  completion_notes: "Python 3.13 compatibility ensured."

- id: "017"
  original_id: "ARCHIVE-DEPCLEAN-3.4"
  title: "Backend: Consolidate Project Structure"
  objective: "Consolidate project structure by removing the obsolete backend/ directory after ensuring all functionality was migrated to app/."
  meta_task: "META-ARCHIVE-DEPCLEAN"
  files: ["backend/", "app/", "Dockerfile", "docker-compose.yml"]
  depends: ["008", "012"]
  done_when: "Obsolete backend/ directory is reviewed, backed up, and deleted. Docker configurations updated to use app/ directory."
  status: done
  ai_ref: "AI-EXECUTION-SESSION-PREVIOUS"
  completion_notes: "Project structure fully consolidated around app/ directory."

- id: "018"
  original_id: "ARCHIVE-COREAPI-2.1"
  title: "Backend: Establish Primary Content Generation Service"
  objective: "Establish EnhancedMultiStepContentGenerationService as the primary service for content generation and update API and documentation accordingly."
  meta_task: "META-ARCHIVE-COREAPI"
  files: ["app/main.py", "app/core/docs/service_architecture.md", "app/services/content_generation.py"]
  depends: ["017"]
  done_when: "app/main.py API endpoint uses EnhancedMultiStepContentGenerationService; service_architecture.md updated; old content_generation.py deprecated."
  status: done
  ai_ref: "AI-EXECUTION-SESSION-20250528"
  completion_notes: "Primary content generation service established and documented."

- id: "019"
  original_id: "ARCHIVE-COREAPI-2.3"
  title: "Backend: Organize API Routes Structure"
  objective: "Improve API codebase organization by refactoring all API route definitions into the app/api/routes/ directory structure."
  meta_task: "META-ARCHIVE-COREAPI"
  files: ["app/api/routes/content.py", "app/api/routes.py", "app/main.py"]
  depends: ["018"]
  done_when: "All API endpoint logic moved to dedicated files within app/api/routes/ and aggregated via app/api/routes.py."
  status: done
  ai_ref: "AI-EXECUTION-SESSION-20250528"
  completion_notes: "Clean API organization with modular route structure."

- id: "020"
  original_id: "VAL-1.1"
  title: "Backend: Comprehensive Content Validation System"
  objective: "Implement comprehensive Pydantic models for validating AI-generated content structure and quality to ensure consistent output format."
  meta_task: "Sprint: Core Content Generation Refactoring (Autonomous)"
  files: ["app/models/pydantic/content.py", "app/utils/content_validation.py", "app/services/content_validation.py", "tests/unit/test_content_validation.py"]
  depends: ["015", "019"]
  done_when: "All AI content types have Pydantic models with proper validation. Content validation service can parse and validate AI output. ValidationError handling is robust."
  status: done
  ai_ref: "CURRENT_SESSION_PHASE2"
  completion_notes: "Comprehensive content validation system with structured Pydantic models, quality validation utilities, sanitization functions, and orchestration service implemented."

# ================================================================================================
# PHASE 3: INFRASTRUCTURE AS CODE
# ================================================================================================

- id: "021"
  original_id: "GCP-1.B.1"
  title: "Infrastructure: Terraform Foundation"
  objective: "Establish foundational Terraform project structure, provider configuration, and remote backend."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/main.tf", "iac/variables.tf", "iac/versions.tf", "iac/backend.tf", "iac/outputs.tf"]
  depends: []
  done_when: "Root Terraform files (main, variables, versions, backend, outputs) are created and configured. GCS bucket for state: acpf-mvp-terraform-state, region: us-central1."
  status: done
  ai_ref: "SESSION_PREVIOUS_TERRAFORM_ROOT_SETUP"
  completion_notes: "Terraform foundation established with remote state management."

- id: "022"
  original_id: "GCP-1.B.2"
  title: "Infrastructure: Artifact Registry Module"
  objective: "Provide a secure, private Docker container registry in GCP for storing application images."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/modules/artifact_registry/main.tf", "iac/modules/artifact_registry/variables.tf", "iac/modules/artifact_registry/outputs.tf"]
  depends: ["021"]
  done_when: "Artifact Registry Terraform module is created and defines the repository resource."
  status: done
  ai_ref: "SESSION_PREVIOUS_AR_MODULE_SETUP"
  completion_notes: "Secure container registry provisioned for application images."

- id: "023"
  original_id: "GCP-1.B.3"
  title: "Infrastructure: Secret Manager Module"
  objective: "Create placeholders in GCP Secret Manager for all sensitive application secrets."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/modules/secret_manager/main.tf", "iac/modules/secret_manager/variables.tf", "iac/modules/secret_manager/outputs.tf"]
  depends: ["021"]
  done_when: "Secret Manager Terraform module is created for defining secret placeholders."
  status: done
  ai_ref: "SESSION_PREVIOUS_SM_MODULE_SETUP"
  completion_notes: "Secure secret management infrastructure established."

- id: "024"
  original_id: "GCP-1.B.5.1"
  title: "Infrastructure: Firestore Module Variables"
  objective: "Parameterize the Firestore Terraform module."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/modules/firestore/variables.tf"]
  depends: ["021"]
  done_when: "variables.tf is created with project_id, location_id, and database_type variables."
  status: done
  ai_ref: "CURRENT_SESSION"
  completion_notes: "Firestore module parameterization completed."

- id: "025"
  original_id: "GCP-1.B.5.2"
  title: "Infrastructure: Firestore Database Resource"
  objective: "Define the Firestore database resource in Terraform."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/modules/firestore/main.tf"]
  depends: ["024"]
  done_when: "main.tf defines google_firestore_database resource."
  status: done
  ai_ref: "CURRENT_SESSION"
  completion_notes: "Firestore database infrastructure defined."

- id: "026"
  original_id: "GCP-1.B.5.3"
  title: "Infrastructure: Firestore Module Outputs"
  objective: "Output necessary information from the Firestore Terraform module."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/modules/firestore/outputs.tf"]
  depends: ["025"]
  done_when: "outputs.tf outputs Firestore DB info."
  status: done
  ai_ref: "CURRENT_SESSION"
  completion_notes: "Firestore module outputs configured for integration."

- id: "027"
  original_id: "GCP-1.B.6.1"
  title: "Infrastructure: Cloud Tasks Module Variables"
  objective: "Parameterize the Cloud Tasks Terraform module."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/modules/cloud_tasks/variables.tf"]
  depends: ["021"]
  done_when: "variables.tf for Cloud Tasks module is created (project_id, location, queue_name, etc.)."
  status: done
  ai_ref: "CURRENT_SESSION"
  completion_notes: "Cloud Tasks module parameterization completed."

- id: "028"
  original_id: "GCP-1.B.6.2"
  title: "Infrastructure: Cloud Tasks Queue Resource"
  objective: "Define the Cloud Tasks queue resource in Terraform."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/modules/cloud_tasks/main.tf"]
  depends: ["027"]
  done_when: "main.tf defines google_cloud_tasks_queue resource with retry and rate limit configs."
  status: done
  ai_ref: "CURRENT_SESSION"
  completion_notes: "Scalable task queue infrastructure established."

- id: "029"
  original_id: "GCP-1.B.6.3"
  title: "Infrastructure: Cloud Tasks Module Outputs"
  objective: "Output necessary information from the Cloud Tasks Terraform module."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/modules/cloud_tasks/outputs.tf"]
  depends: ["028"]
  done_when: "outputs.tf outputs queue ID/name."
  status: done
  ai_ref: "CURRENT_SESSION"
  completion_notes: "Cloud Tasks module outputs configured for application integration."

- id: "030"
  original_id: "GCP-1.B.4"
  title: "Infrastructure: Cloud Run Service Module"
  objective: "Define the GCP Cloud Run service for serverless application hosting."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/modules/cloud_run_service/main.tf", "iac/modules/cloud_run_service/variables.tf", "iac/modules/cloud_run_service/outputs.tf"]
  depends: ["021", "022"]
  done_when: "Cloud Run service Terraform module is created and defines the service resource."
  status: done
  ai_ref: "SESSION_PREVIOUS_CR_MODULE_SETUP"
  completion_notes: "Serverless application hosting infrastructure defined."

- id: "031"
  original_id: "GCP-1.B.7.1"
  title: "Infrastructure: API Gateway Module Variables"
  objective: "Parameterize the API Gateway Terraform module."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/modules/api_gateway/variables.tf"]
  depends: ["021"]
  done_when: "variables.tf for API Gateway module is created."
  status: done
  ai_ref: "CURRENT_SESSION"
  completion_notes: "API Gateway module parameterization completed."

- id: "032"
  original_id: "GCP-1.B.7.2"
  title: "Infrastructure: API Gateway Resources & OpenAPI Spec"
  objective: "Define the API Gateway resources in Terraform and draft OpenAPI spec."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/modules/api_gateway/main.tf", "iac/files/openapi.yaml"]
  depends: ["031", "030"]
  done_when: "main.tf defines API, API Config, and Gateway resources. openapi.yaml is drafted."
  status: done
  ai_ref: "CURRENT_SESSION"
  completion_notes: "API Gateway infrastructure with OpenAPI specification completed."

- id: "033"
  original_id: "GCP-1.B.7.3"
  title: "Infrastructure: API Gateway Module Outputs"
  objective: "Output necessary information from the API Gateway Terraform module."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/modules/api_gateway/outputs.tf"]
  depends: ["032"]
  done_when: "outputs.tf outputs gateway URL."
  status: done
  ai_ref: "CURRENT_SESSION"
  completion_notes: "API Gateway module outputs configured for application access."

- id: "034"
  original_id: "GCP-1.B.8.1"
  title: "Infrastructure: Cloud Workflows Module Variables"
  objective: "Parameterize the Cloud Workflows Terraform module."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/modules/workflows/variables.tf"]
  depends: ["021"]
  done_when: "variables.tf for Cloud Workflows module is created."
  status: done
  ai_ref: "CURRENT_SESSION"
  completion_notes: "Cloud Workflows module parameterization completed."

- id: "035"
  original_id: "GCP-1.B.8.2"
  title: "Infrastructure: Cloud Workflows Resource & Placeholder"
  objective: "Define the Cloud Workflows resource in Terraform with a placeholder definition."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/modules/workflows/main.tf", "iac/files/workflow_placeholder.yaml"]
  depends: ["034"]
  done_when: "main.tf defines google_workflows_workflow resource with a placeholder workflow definition."
  status: done
  ai_ref: "CURRENT_SESSION"
  completion_notes: "Workflow orchestration infrastructure with placeholder defined."

- id: "036"
  original_id: "GCP-1.B.8.3"
  title: "Infrastructure: Cloud Workflows Module Outputs"
  objective: "Output necessary information from the Cloud Workflows Terraform module."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/modules/workflows/outputs.tf"]
  depends: ["035"]
  done_when: "outputs.tf outputs workflow ID/name."
  status: done
  ai_ref: "CURRENT_SESSION"
  completion_notes: "Cloud Workflows module outputs configured for integration."

- id: "037"
  original_id: "GCP-1.B.9.1"
  title: "Infrastructure: IAM Service Accounts & Policies"
  objective: "Define Service Accounts and their IAM policies in Terraform based on least-privilege."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/modules/iam/main.tf", "iac/modules/iam/variables.tf", "iac/modules/iam/outputs.tf"]
  depends: ["023", "030", "025", "028", "035"]
  done_when: "Cloud Run SA and other necessary SAs are defined with least-privilege IAM bindings."
  status: done
  ai_ref: "CURRENT_SESSION"
  completion_notes: "Comprehensive IAM configuration with least-privilege access controls."

- id: "038"
  original_id: "INF-1.1"
  title: "Infrastructure: Secret Manager Integration"
  objective: "Ensure all application secrets are securely stored in and retrieved from GCP Secret Manager at runtime."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/modules/secret_manager/main.tf", "app/core/config/settings.py", "app/core/security/secrets.py", "docs/operational/secrets_management.md"]
  depends: ["023", "011"]
  done_when: "All secrets defined in Terraform; app fetches secrets at runtime; Process for adding/updating secret versions is documented."
  status: done
  ai_ref: "CURRENT_SESSION"
  completion_notes: "Secure runtime secret management fully integrated with application."

- id: "039"
  original_id: "INF-1.2"
  title: "Infrastructure: IAM Least-Privilege Verification"
  objective: "Verify and refine IAM policies to ensure all service accounts operate under the principle of least privilege."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["iac/modules/iam/main.tf"]
  depends: ["037"]
  done_when: "All service accounts (Cloud Run, Cloud Tasks invoker, Workflow executor etc.) have only necessary permissions."
  status: done
  ai_ref: "CURRENT_SESSION_PHASE1"
  completion_notes: "Enhanced IAM with Cloud Tasks enqueue permissions, logging/monitoring permissions, better organization and documentation. Security verified."

- id: "040"
  original_id: "GCP-1.A.1"
  title: "Infrastructure: Docker Start Script"
  objective: "Implement start.sh script for Docker container to manage Nginx & Uvicorn."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["start.sh", "Dockerfile"]
  depends: ["003"]
  done_when: "start.sh created. Dockerfile updated to copy, chmod, and use start.sh in CMD."
  status: done
  ai_ref: "SESSION_PREVIOUS_STARTSH_SETUP"
  completion_notes: "Multi-service container orchestration established."

# ================================================================================================
# PHASE 4: BACKEND API DEVELOPMENT
# ================================================================================================

- id: "041"
  original_id: "API-2.1"
  title: "API: Firestore Database Integration"
  objective: "Enable FastAPI application to interact with Firestore for data persistence."
  meta_task: "Next Sprint: SaaS Quality Enhancements & Product Features"
  files: ["app/services/job/firestore_client.py", "app/main.py", "requirements.txt"]
  depends: ["026", "020"]
  done_when: "FastAPI app can connect to Firestore; test endpoint or initial service call can read/write a test document."
  status: done
  ai_ref: "CURRENT_SESSION"
  completion_notes: "Firestore client and helper functions created with async support."

- id: "042"
  original_id: "API-VAL-2.8"
  title: "API: Pydantic Request Validation"
  objective: "Move syllabus_text length validation to the Pydantic model for cleaner, schema-based validation."
  meta_task: "Next Sprint: SaaS Quality Enhancements & Product Features"
  files: ["app/models/pydantic/content.py", "app/api/routes/content.py", "app/api/routes/jobs.py"]
  depends: ["020"]
  done_when: "ContentRequest model enforces min_length and max_length on syllabus_text. Manual length checks are removed from route handlers."
  status: done
  ai_ref: "SESSION_PREVIOUS_CONTENTREQUEST_UPDATE"
  completion_notes: "Pydantic-based validation implemented for cleaner request handling."

- id: "043"
  original_id: "API-2.2"
  title: "API: User Registration System"
  objective: "Allow new users to create accounts on the platform."
  meta_task: "Next Sprint: SaaS Quality Enhancements & Product Features"
  files: ["app/api/routes/auth.py", "app/models/pydantic/user.py", "app/core/security/hashing.py"]
  depends: ["041", "038"]
  done_when: "POST /api/v1/auth/register with valid data creates user in Firestore and returns 201 or user details."
  status: done
  ai_ref: "CURRENT_SESSION"
  completion_notes: "User registration endpoint with password hashing and Firestore integration completed."

- id: "044"
  original_id: "API-2.3"
  title: "API: User Authentication & JWT"
  objective: "Allow registered users to authenticate and obtain a session token."
  meta_task: "Next Sprint: SaaS Quality Enhancements & Product Features"
  files: ["app/api/routes/auth.py", "app/core/security/tokens.py"]
  depends: ["043"]
  done_when: "POST /api/v1/auth/login with valid credentials returns 200 and JWT; invalid credentials return 401."
  status: done
  ai_ref: "CURRENT_SESSION"
  completion_notes: "Login endpoint and JWT generation system completed."

- id: "045"
  original_id: "API-2.4"
  title: "API: Secret Manager Configuration Loading"
  objective: "Ensure FastAPI application securely retrieves all necessary API keys and sensitive configurations from Secret Manager."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["app/core/config/settings.py", "app/core/security/secrets.py"]
  depends: ["038"]
  done_when: "Application successfully uses API keys fetched from Secret Manager for all external services."
  status: done
  ai_ref: "CURRENT_SESSION"
  completion_notes: "Secret Manager integration verified for all external API keys."

- id: "046"
  original_id: "ARCHIVE-COREAPI-2.2"
  title: "API: Initial Async Job Framework"
  objective: "Implement the initial framework for an asynchronous job-based workflow for content generation, including basic API endpoints and in-memory job management."
  meta_task: "META-ARCHIVE-COREAPI"
  files: ["app/core/schemas/job.py", "app/api/routes/jobs.py", "app/services/job_manager.py"]
  depends: ["018"]
  done_when: "Initial async job system framework implemented with API support (create, list, get job) and in-memory JobManager."
  status: done
  ai_ref: "AI-EXECUTION-SESSION-PREVIOUS"
  completion_notes: "Initial async job system framework with in-memory storage completed."

- id: "047"
  original_id: "API-2.5"
  title: "API: Production Async Jobs with Firestore & Cloud Tasks"
  objective: "Implement a scalable, asynchronous job system for content generation using Firestore and Cloud Tasks."
  meta_task: "Next Sprint: SaaS Quality Enhancements & Product Features"
  files: ["app/services/job_manager.py", "app/services/job/tasks_client.py", "app/api/routes/jobs.py"]
  depends: ["046", "041", "029"]
  done_when: "Client can POST to /api/v1/jobs to create a generation job, receives a job ID. Client can GET /api/v1/jobs/{job_id} to track status."
  status: done
  ai_ref: "CURRENT_SESSION_PHASE3"
  completion_notes: "Complete jobs API system with Firestore persistence, Cloud Tasks integration, and comprehensive error handling."

- id: "048"
  original_id: "API-2.6"
  title: "API: Internal Content Generation Worker"
  objective: "Provide an internal, synchronous endpoint for performing the core AI content generation, to be called by the Cloud Task worker."
  meta_task: "Next Sprint: SaaS Quality Enhancements & Product Features"
  files: ["app/api/routes/worker.py", "app/services/multi_step_content_generation.py"]
  depends: ["045", "041", "020"]
  done_when: "Internal worker endpoint can be triggered by a Cloud Task, fetches job data, performs content generation, validates AI output against Pydantic models, and updates Firestore."
  status: done
  ai_ref: "CURRENT_SESSION_PHASE3"
  completion_notes: "Complete internal worker endpoint with Cloud Tasks integration, content validation, and Firestore updates."

- id: "049"
  original_id: "API-2.7"
  title: "API: Content Feedback System"
  objective: "Allow users to provide feedback (e.g., like/dislike) on generated content."
  meta_task: "Next Sprint: SaaS Quality Enhancements & Product Features"
  files: ["app/api/routes/feedback.py", "app/models/pydantic/feedback.py"]
  depends: ["041", "044"]
  done_when: "Authenticated POST to feedback endpoint stores rating/comment in Firestore and returns 200/201."
  status: done
  ai_ref: "CLINE_EXECUTION_20250529_2244"
  completion_notes: "Content feedback API with authentication and Firestore integration completed."

- id: "050"
  original_id: "ARCHIVE-ASYNCTEST-A"
  title: "API: Enhanced Job Parameters"
  objective: "Enhance the job creation request to include target_duration and target_pages, and ensure these parameters are processed by the JobManager."
  meta_task: "META-ARCHIVE-ASYNCTEST"
  files: ["app/api/routes/content.py", "app/services/job_manager.py"]
  depends: ["046"]
  done_when: "ContentRequest model updated with target_duration and target_pages; JobManager processes these parameters."
  status: done
  ai_ref: "tasks_archive.md (NEW SPRINT FOCUS: Enable E2E Testing... Task A)"
  completion_notes: "Enhanced job parameters for improved content generation control."

- id: "051"
  original_id: "ARCHIVE-ASYNCTEST-B"
  title: "API: Meaningful Progress Updates"
  objective: "Improve the meaningfulness of progress updates provided by the JobManager during asynchronous job processing."
  meta_task: "META-ARCHIVE-ASYNCTEST"
  files: ["app/services/job_manager.py", "app/services/multi_step_content_generation.py"]
  depends: ["046"]
  done_when: "JobManager provides more meaningful current_step messages and percentage estimates based on service stages."
  status: done
  ai_ref: "tasks_archive.md (NEW SPRINT FOCUS: Enable E2E Testing... Task B)"
  completion_notes: "Enhanced progress tracking with meaningful step indicators."

- id: "052"
  original_id: "EP11.3"
  title: "Backend: Configurable Application Port"
  objective: "Resolve application port conflicts (Uvicorn/Prometheus) and make port configurable."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["app/main.py", "app/core/config/settings.py", "start.sh"]
  depends: ["004"]
  done_when: "Prometheus port changed to 9000. Uvicorn port configurable via APP_PORT (used by start.sh and local app/main.py run)."
  status: done
  ai_ref: "SESSION_PREVIOUS_PORT_CONFIG"
  completion_notes: "Port configuration management implemented to avoid conflicts."

- id: "053"
  original_id: "EP11.4"
  title: "Backend: Safe API Key Logging"
  objective: "Fix settings.api_key slicing bug in logging."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["app/main.py"]
  depends: ["004"]
  done_when: "api_key slicing in get_api_key function safely handles None values."
  status: done
  ai_ref: "SESSION_PREVIOUS_APIKEY_SLICE_FIX"
  completion_notes: "Secure API key handling in logging implemented."

- id: "054"
  original_id: "GCP-1.A.2"
  title: "Infrastructure: Nginx Configuration"
  objective: "Configure Nginx in Docker image for serving static content and proxying API."
  meta_task: "Current Sprint: GCP-Native Serverless Architecture"
  files: ["docker/nginx/nginx.conf", "docker/static_content/index.html", "Dockerfile"]
  depends: ["040"]
  done_when: "nginx.conf and placeholder index.html created. Dockerfile updated to copy them."
  status: done
  ai_ref: "SESSION_PREVIOUS_NGINX_SETUP"
  completion_notes: "Nginx reverse proxy and static content serving configured."

- id: "055"
  original_id: "INF-2.1"
  title: "Infrastructure: Docker Security Hardening"
  objective: "Enhance Docker container security by running the application as a non-root user."
  meta_task: "Sprint: Project Finalization & Polish (AI Execution - Cline)"
  files: ["Dockerfile", "start.sh"]
  depends: ["040"]
  done_when: "Dockerfile creates a non-root user, and the application runs as this user with correct file permissions."
  status: done
  ai_ref: "CLINE_EXECUTION_20250529_2231"
  completion_notes: "Container security improved with non-root user execution."

# ================================================================================================\n# PHASE 5: FRONTEND DEVELOPMENT\n# ================================================================================================\n\n- id: \"056\"\n  original_id: \"FE-3.1\"\n  title: \"Frontend: Authentication UI Components\"\n  objective: \"Enable users to create accounts and log in through the React frontend.\"\n  meta_task: \"Next Sprint: SaaS Quality Enhancements & Product Features\"\n  files: [\"frontend/src/components/Auth/RegistrationForm.tsx\", \"frontend/src/components/Auth/LoginForm.tsx\", \"frontend/src/contexts/AuthContext.tsx\"]\n  depends: [\"043\", \"044\"]\n  done_when: \"User can register and login via UI; JWT is stored and used for subsequent requests; protected routes become accessible.\"\n  status: done\n  ai_ref: \"SYNC_UPDATE_20250130\"\n  completion_notes: \"Complete authentication flow with JWT storage and auth state management.\"\n\n- id: \"057\"\n  original_id: \"FE-3.2\"\n  title: \"Frontend: Content Generation Interface\"\n  objective: \"Enable users to request AI content generation and view the results in the React frontend.\"\n  meta_task: \"Next Sprint: SaaS Quality Enhancements & Product Features\"\n  files: [\"frontend/src/components/Content/ContentGeneratorForm.tsx\", \"frontend/src/types/content.ts\", \"frontend/src/api.ts\"]\n  depends: [\"047\"]\n  done_when: \"User can submit a content generation request, receive a job_id, and the UI is ready to display status/results for that job.\"\n  status: done\n  ai_ref: \"SYNC_UPDATE_20250130\"\n  completion_notes: \"Content generation form with proper job handling and result display capability.\"\n\n- id: \"058\"\n  original_id: \"FE-3.3\"\n  title: \"Frontend: Job Status Monitoring\"\n  objective: \"Provide users with real-time (or polled) status of their content generation jobs and display errors clearly.\"\n  meta_task: \"Next Sprint: SaaS Quality Enhancements & Product Features\"\n  files: [\"frontend/src/components/Job/JobStatusDisplay.tsx\", \"frontend/src/pages/JobStatusPage.tsx\", \"frontend/src/App.tsx\"]\n  depends: [\"057\"]\n  done_when: \"UI polls for job status, displays progress, shows final content upon completion, and API errors are displayed in a user-friendly modal.\"\n  status: done\n  ai_ref: \"SYNC_UPDATE_20250130\"\n  completion_notes: \"Real-time job monitoring with polling, progress tracking, and error handling.\"\n\n- id: \"059\"\n  original_id: \"FE-3.4\"\n  title: \"Frontend: Logout Functionality\"\n  objective: \"Allow authenticated users to log out of the application from the frontend.\"\n  meta_task: \"Next Sprint: SaaS Quality Enhancements & Product Features\"\n  files: [\"frontend/src/components/Layout/Navbar.tsx\", \"frontend/src/contexts/AuthContext.tsx\"]\n  depends: [\"056\"]\n  done_when: \"User clicks logout, JWT is cleared from storage, auth state is reset, and user is redirected to login page.\"\n  status: done\n  ai_ref: \"CLINE_EXECUTION_20250530_0805\"\n  completion_notes: \"Logout functionality with token clearing and navigation implemented.\"\n\n- id: \"060\"\n  original_id: \"FE-3.5\"\n  title: \"Frontend: Content Feedback Interface\"\n  objective: \"Enable users to provide feedback (like/dislike) on generated content through the UI.\"\n  meta_task: \"Next Sprint: SaaS Quality Enhancements & Product Features\"\n  files: [\"frontend/src/components/Content/ContentDisplay.tsx\", \"frontend/src/api.ts\"]\n  depends: [\"049\", \"057\"]\n  done_when: \"User can click like/dislike buttons on content, feedback is sent to the backend, and UI updates to reflect action.\"\n  status: done\n  ai_ref: \"CLINE_EXECUTION_20250530_0805\"\n  completion_notes: \"Content feedback UI with like/dislike functionality and backend integration.\"\n\n- id: \"061\"\n  original_id: \"UX-4.1\"\n  title: \"Frontend: User Onboarding Wizard\"\n  objective: \"Improve new user experience by providing an initial onboarding guide to the app's main features.\"\n  meta_task: \"Next Sprint: SaaS Quality Enhancements & Product Features\"\n  files: [\"frontend/src/components/Onboarding/OnboardingWizard.tsx\", \"frontend/src/App.tsx\"]\n  depends: [\"057\", \"058\"]\n  done_when: \"A 3-step onboarding wizard modal appears for first-time users, explaining core features and navigation.\"\n  status: skipped\n  ai_ref: \"CLINE_EXECUTION_20250530_0805\"\n  completion_notes: \"Skipping stretch goal to focus on core functionality.\"\n\n- id: \"062\"\n  original_id: \"UX-4.2\"\n  title: \"Frontend: Loading States & Error Handling\"\n  objective: \"Improve perceived performance and reduce user uncertainty during content loading by using loading indicators and error displays.\"\n  meta_task: \"Next Sprint: SaaS Quality Enhancements & Product Features\"\n  files: [\"frontend/src/contexts/ErrorContext.tsx\", \"frontend/src/components/common/ErrorDisplay.tsx\", \"frontend/src/App.tsx\"]\n  depends: [\"057\"]\n  done_when: \"Basic text loading indicators are used. Global error messages can be set via ErrorContext and are displayed by ErrorDisplay component.\"\n  status: done\n  ai_ref: \"SYNC_UPDATE_20250130\"\n  completion_notes: \"Global error handling and loading states implemented throughout the application.\"\n\n- id: \"063\"\n  original_id: \"FE-TS-ERRORS-RESOLVE\"\n  title: \"Frontend: TypeScript Error Resolution\"\n  objective: \"Resolve persistent TypeScript errors in frontend files (Axios/Zustand types, etc.).\"\n  meta_task: \"META-DEPLOY-1\"\n  files: [\"frontend/tsconfig.json\", \"frontend/package.json\"]\n  depends: [\"062\"]\n  done_when: \"All TypeScript errors are resolved and frontend builds successfully with zero errors.\"\n  status: done\n  ai_ref: \"AUTONOMOUS_EXECUTION_20250129\"\n  completion_notes: \"Successfully resolved all 17 TypeScript errors: Fixed Axios imports, updated Zustand for v4.5.1, migrated to @tanstack/react-query v5, removed unused imports, fixed implicit types, created missing index.css.\"\n\n- id: \"064\"\n  original_id: \"CI-FE-1.1\"\n  title: \"Frontend: CI/CD Pipeline\"\n  objective: \"Automate frontend testing, linting, and building on code changes.\"\n  meta_task: \"Current Sprint: GCP-Native Serverless Architecture\"\n  files: [\".github/workflows/frontend-ci.yml\", \"frontend/\"]\n  depends: [\"063\"]\n  done_when: \"Workflow installs Node, runs npm test, lint, and build for the React app on push/PR.\"\n  status: done\n  ai_ref: \"CLINE_EXECUTION_20250529_2340\"\n  completion_notes: \"Frontend CI/CD pipeline with testing, linting, and build automation.\"\n\n- id: \"065\"\n  original_id: \"DEV-6.3\"\n  title: \"Frontend: Pre-commit Hooks\"\n  objective: \"Automate code quality checks locally using pre-commit hooks for frontend code.\"\n  meta_task: \"Next Sprint: SaaS Quality Enhancements & Product Features\"\n  files: [\"frontend/package.json\", \"frontend/.husky/pre-commit\"]\n  depends: [\"064\", \"077\"]\n  done_when: \"Pre-commit hooks run automatically for frontend code, blocking commits if checks fail.\"\n  status: done\n  ai_ref: \"CLINE_EXECUTION_20250529_2342\"\n  completion_notes: \"Frontend pre-commit hooks configured with Husky and lint-staged.\"\n\n# ================================================================================================\n# PHASE 6: AI CONTENT QUALITY & GENERATION\n# ================================================================================================\n\n- id: \"066\"\n  original_id: \"AI-6.1\"\n  title: \"AI: Outline-Driven Prompt Architecture\"\n  objective: \"Refactor AI prompts to support an outline-driven, modular content generation architecture, with each content type generated from a master outline via a dedicated prompt.\"\n  meta_task: \"Sprint: Core Content Generation Refactoring (Autonomous)\"\n  files: [\"app/core/prompts/v1/multi_step_prompts.py\"]\n  depends: [\"020\"]\n  done_when: \"All new prompts are created for master outline and derivative types. Prompts instruct AI to output JSON matching Pydantic models.\"\n  status: done\n  ai_ref: \"AUTOSPRINT_20240726_1400_REFACTOR\"\n  completion_notes: \"Successfully refactored prompts for modular, outline-driven generation with dedicated prompts for each content type.\"\n\n- id: \"067\"\n  original_id: \"SVC-1.1\"\n  title: \"AI: Refactor Content Generation Service\"\n  objective: \"Refactor EnhancedMultiStepContentGenerationService to use an outline-driven, modular flow. Generate master outline first, then derivative content types in parallel.\"\n  meta_task: \"Sprint: Core Content Generation Refactoring (Autonomous)\"\n  files: [\"app/services/multi_step_content_generation.py\"]\n  depends: [\"066\"]\n  done_when: \"Service implements new flow: generates outline, then derivatives in parallel. Correctly aggregates results into GeneratedContent model.\"\n  status: done\n  ai_ref: \"AUTOSPRINT_20240726_1400_REFACTOR\"\n  completion_notes: \"Core service logic refactored for outline-driven flow with parallel content generation.\"\n\n- id: \"068\"\n  original_id: \"SVC-1.2\"\n  title: \"AI: Service Code Cleanup\"\n  objective: \"Remove or fully comment out deprecated methods in EnhancedMultiStepContentGenerationService to finalize refactoring.\"\n  meta_task: \"Sprint: Project Finalization & Polish (AI Execution - Cline)\"\n  files: [\"app/services/multi_step_content_generation.py\"]\n  depends: [\"067\"]\n  done_when: \"Deprecated methods are no longer active code and functionality is fully replaced.\"\n  status: done\n  ai_ref: \"CLINE_EXECUTION_20250529_2216\"\n  completion_notes: \"Verified deprecated methods are not present in current version. Functionality replaced during refactoring.\"\n\n- id: \"069\"\n  original_id: \"AI-5.1\"\n  title: \"AI: External Prompt Templates\"\n  objective: \"Improve maintainability and iteration speed for AI prompts by externalizing them from code and refining their structure.\"\n  meta_task: \"Next Sprint: SaaS Quality Enhancements & Product Features\"\n  files: [\"app/core/prompts/v1/\", \"app/services/prompts.py\"]\n  depends: [\"067\"]\n  done_when: \"All AI prompts are loaded from external files. Generated content shows improvement in structure, relevance, and adherence to constraints.\"\n  status: done\n  ai_ref: \"CLINE_EXECUTION_20250530_0804\"\n  completion_notes: \"Prompt externalization complete with PromptService integration. Redundant files removed.\"\n\n- id: \"070\"\n  original_id: \"AI-5.2\"\n  title: \"AI: Grammar & Style Post-Processing\"\n  objective: \"Enhance the quality of AI-generated text by automatically correcting common grammatical errors and improving style.\"\n  meta_task: \"Next Sprint: SaaS Quality Enhancements & Product Features\"\n  files: [\"app/utils/text_cleanup.py\", \"app/services/multi_step_content_generation.py\", \"requirements.txt\"]\n  depends: [\"069\"]\n  done_when: \"Generated text content is passed through the cleanup utility. Sample outputs demonstrate improved grammar and style.\"\n  status: done\n  ai_ref: \"CLINE_EXECUTION_20250530_0804\"\n  completion_notes: \"Language-tool-python integrated with grammar correction function applied to relevant text content.\"\n\n- id: \"071\"\n  original_id: \"AI-5.3\"\n  title: \"AI: End-to-End User Feedback System\"\n  objective: \"Implement a complete end-to-end system for users to provide feedback on AI content quality, and for this feedback to be stored.\"\n  meta_task: \"Next Sprint: SaaS Quality Enhancements & Product Features\"\n  files: []\n  depends: [\"049\", \"060\"]\n  done_when: \"User feedback submitted via UI for content quality is successfully stored in Firestore and can be retrieved for analysis.\"\n  status: done\n  ai_ref: \"SYNC_UPDATE_20250130\"\n  completion_notes: \"End-to-end feedback system functional with backend API and frontend UI integration.\"\n\n- id: \"072\"\n  original_id: \"AI-5.4\"\n  title: \"AI: Token Usage & Cost Tracking\"\n  objective: \"Provide visibility into AI service consumption by monitoring token usage and estimating costs.\"\n  meta_task: \"Next Sprint: SaaS Quality Enhancements & Product Features\"\n  files: [\"app/services/multi_step_content_generation.py\", \"app/services/audio_generation.py\", \"app/core/config/settings.py\"]\n  depends: [\"048\"]\n  done_when: \"Each call to an external AI service logs its token usage and estimated cost. Logs are structured and allow for aggregation.\"\n  status: done\n  ai_ref: \"CLINE_EXECUTION_20250530_0804\"\n  completion_notes: \"Token/character count and cost tracking implemented for Vertex AI and ElevenLabs with conditional logging.\"\n\n- id: \"073\"\n  original_id: \"EP11.5\"\n  title: \"AI: Flashcard Validation (Obsolete)\"\n  objective: \"Add Flashcards length validation (10-20 cards) in content generation service.\"\n  meta_task: \"Current Sprint: GCP-Native Serverless Architecture\"\n  files: [\"app/services/multi_step_content_generation.py\"]\n  depends: [\"067\"]\n  done_when: \"Task marked obsolete - flashcard length validation handled by Pydantic models.\"\n  status: done\n  ai_ref: \"CLINE_EXECUTION_20250529_2218\"\n  completion_notes: \"Task obsolete. Flashcard validation handled by Pydantic models (VAL-1.1). Service refactored.\"\n\n- id: \"074\"\n  original_id: \"EP11.5-FIX\"\n  title: \"AI: Service Logic Cleanup (Obsolete)\"\n  objective: \"Resolve linter errors in the flashcard validation logic within content generation service.\"\n  meta_task: \"Current Sprint: GCP-Native Serverless Architecture\"\n  files: [\"app/services/multi_step_content_generation.py\"]\n  depends: [\"073\"]\n  done_when: \"Task marked obsolete - method was refactored out during service redesign.\"\n  status: done\n  ai_ref: \"CLINE_EXECUTION_20250529_2218\"\n  completion_notes: \"Task obsolete. The _assemble_content method was refactored. Safe extraction and validation handled in current architecture.\"\n\n- id: \"075\"\n  original_id: \"RULE-1.0\"\n  title: \"AI: Vibe Coding Rules Overhaul\"\n  objective: \"Transform .cursor/rules/project.mdc to integrate the 'Vibe Coding' philosophy and create memory/guidelines.md.\"\n  meta_task: \"Sprint: Vibe Coding Rules & AI Guidelines Overhaul (Autonomous)\"\n  files: [\".cursor/rules/project.mdc\", \"memory/guidelines.md\"]\n  depends: []\n  done_when: \".cursor/rules/project.mdc is fully revised as per Vibe Coding V2 prompt and memory/guidelines.md is created and populated.\"\n  status: done\n  ai_ref: \"AUTOSPRINT_20240726_VIBE_CODING\"\n  completion_notes: \"Successfully revised project rules for Vibe Coding philosophy and created AI Core Operating Principles.\"\n\n# ================================================================================================\n# PHASE 7: CI/CD & DEVOPS\n# ================================================================================================\n\n- id: \"076\"\n  original_id: \"CI-1.1\"\n  title: \"DevOps: Backend CI Pipeline\"\n  objective: \"Automate backend testing and linting on code changes.\"\n  meta_task: \"Current Sprint: GCP-Native Serverless Architecture\"\n  files: [\".github/workflows/backend-ci.yml\"]\n  depends: [\"012\"]\n  done_when: \"Workflow installs dependencies, runs pytest, and linters on push/PR to main/dev branches.\"\n  status: done\n  ai_ref: \"CURRENT_SESSION\"\n  completion_notes: \"Backend CI pipeline with automated testing and linting established.\"\n\n- id: \"077\"\n  original_id: \"EP11.2\"\n  title: \"DevOps: Pre-commit Hooks Configuration\"\n  objective: \"Implement basic pre-commit hooks configuration.\"\n  meta_task: \"Next Sprint: SaaS Quality Enhancements & Product Features\"\n  files: [\".pre-commit-config.yaml\"]\n  depends: [\"076\"]\n  done_when: \".pre-commit-config.yaml created with black, ruff, mypy. Manual setup steps documented.\"\n  status: done\n  ai_ref: \"SESSION_PREVIOUS_PRECOMMIT_CONFIG\"\n  completion_notes: \"Pre-commit hooks configuration for Python backend code quality.\"\n\n- id: \"078\"\n  original_id: \"CI-1.2\"\n  title: \"DevOps: Docker Build & Registry\"\n  objective: \"Automate Docker image build and push to Artifact Registry.\"\n  meta_task: \"Current Sprint: GCP-Native Serverless Architecture\"\n  files: [\".github/workflows/build-push-docker.yml\", \"Dockerfile\"]\n  depends: [\"022\", \"076\"]\n  done_when: \"On push to main (after tests pass), Docker image is built, tagged with GITHUB_SHA, and pushed to Artifact Registry.\"\n  status: done\n  ai_ref: \"CURRENT_SESSION\"\n  completion_notes: \"Automated Docker build and push pipeline to GCP Artifact Registry.\"\n\n- id: \"079\"\n  original_id: \"CI-1.3\"\n  title: \"DevOps: Terraform Automation\"\n  objective: \"Automate Terraform apply for infrastructure changes.\"\n  meta_task: \"Current Sprint: GCP-Native Serverless Architecture\"\n  files: [\".github/workflows/terraform-apply.yml\", \"iac/\"]\n  depends: [\"021\"]\n  done_when: \"On push to main (or manual trigger), Terraform init, validate, plan, and apply are executed successfully for the target environment.\"\n  status: done\n  ai_ref: \"CURRENT_SESSION\"\n  completion_notes: \"Infrastructure as Code deployment pipeline established.\"\n\n- id: \"080\"\n  original_id: \"CI-1.4\"\n  title: \"DevOps: Cloud Run Deployment\"\n  objective: \"Automate deployment of the application to Cloud Run.\"\n  meta_task: \"Current Sprint: GCP-Native Serverless Architecture\"\n  files: [\".github/workflows/deploy-cloud-run.yml\"]\n  depends: [\"078\", \"030\"]\n  done_when: \"On push to main (after Docker image build), new revision is deployed to Cloud Run service using the latest image from Artifact Registry.\"\n  status: done\n  ai_ref: \"CURRENT_SESSION\"\n  completion_notes: \"Automated Cloud Run deployment pipeline established.\"\n\n- id: \"081\"\n  original_id: \"ARCHIVE-GCPSETUP-1.1\"\n  title: \"DevOps: GCP Project Setup\"\n  objective: \"Initial GCP project setup, including enabling necessary APIs and configuring billing.\"\n  meta_task: \"META-ARCHIVE-GCPSETUP\"\n  files: [] # Manual GCP Console task\n  depends: []\n  done_when: \"GCP project created, billing enabled, required APIs (Cloud Run, Vertex AI, Firestore, etc.) enabled.\"\n  status: done\n  ai_ref: \"AI-EXECUTION-SESSION-PREVIOUS\"\n  completion_notes: \"Initial GCP project configuration completed.\"\n\n- id: \"082\"\n  original_id: \"ARCHIVE-ASYNCTEST-C\"\n  title: \"DevOps: Manual Setup Documentation\"\n  objective: \"Document manual setup steps for local development environment and any one-time configurations.\"\n  meta_task: \"META-ARCHIVE-ASYNCTEST\"\n  files: [\"README.md\", \"docs/developer/local_setup.md\"]\n  depends: [\"077\"]\n  done_when: \"README.md and local_setup.md contain clear instructions for setting up the development environment, including pre-commit hooks.\"\n  status: done\n  ai_ref: \"tasks_archive.md (NEW SPRINT FOCUS: Enable E2E Testing... Task C)\"\n  completion_notes: \"Comprehensive local development setup documentation created.\"\n\n- id: \"083\"\n  original_id: \"DEV-6.1\"\n  title: \"DevOps: Three-File Task System\"\n  objective: \"Establish and enforce the three-file task management system (meta_tasks.md, atomic_tasks.yaml, task_details.md) for clear project tracking.\"\n  meta_task: \"Sprint: Project Finalization & Polish (AI Execution - Cline)\"\n  files: [\"tasks/meta_tasks.md\", \"tasks/atomic_tasks.yaml\", \"tasks/task_details.md\"]\n  depends: []\n  done_when: \"All three task files are created, populated with initial project tasks, and cross-referenced. Project rules updated to mandate their use.\"\n  status: done\n  ai_ref: \"CLINE_EXECUTION_20250529_2200\"\n  completion_notes: \"Three-file task management system established and populated.\"\n\n- id: \"084\"\n  original_id: \"DEV-6.2\"\n  title: \"DevOps: Developer Documentation\"\n  objective: \"Create and maintain comprehensive developer documentation covering architecture, setup, and key decisions.\"\n  meta_task: \"Sprint: Project Finalization & Polish (AI Execution - Cline)\"\n  files: [\"docs/ARCHITECTURE.md\", \"docs/decisions-log.md\", \"docs/feature-tracker.md\", \"docs/learn-as-you-go.md\", \"docs/architecture-map.md\"]\n  depends: [\"083\"]\n  done_when: \"All specified developer documentation files are created, populated with relevant information, and align with project standards.\"\n  status: done\n  ai_ref: \"CLINE_EXECUTION_20250529_2200\"\n  completion_notes: \"Comprehensive developer documentation suite created and populated.\"\n\n- id: \"085\"\n  original_id: \"ARCHIVE-DEVEX11-11.1\"\n  title: \"DevOps: AI Context Dump Script\"\n  objective: \"Create a script to generate a comprehensive AI context dump for efficient AI-assisted development.\"\n  meta_task: \"META-ARCHIVE-DEVEX11\"\n  files: [\"scripts/generate_ai_context_dump.py\"]\n  depends: []\n  done_when: \"Script generates a structured text file containing key project information (file structure, rules, tasks, etc.).\"\n  status: done\n  ai_ref: \"AI-EXECUTION-SESSION-PREVIOUS\"\n  completion_notes: \"AI context dump script created for improved development efficiency.\"\n\n# ================================================================================================\n# PHASE 8: TESTING & QUALITY ASSURANCE\n# ================================================================================================\n\n- id: \"086\"\n  original_id: \"TEST-1.1\"\n  title: \"Testing: Update Unit Tests for Refactored Service\"\n  objective: \"Update unit tests for EnhancedMultiStepContentGenerationService to reflect its new outline-driven, modular architecture and ensure high coverage.\"\n  meta_task: \"Sprint: Core Content Generation Refactoring (Autonomous)\"\n  files: [\"tests/unit/test_multi_step_content_generation.py\"]\n  depends: [\"067\", \"020\"]\n  done_when: \"Unit tests cover new service logic, including outline generation, parallel derivative generation, Pydantic model validation, and error handling. Coverage >80%.\"\n  status: done\n  ai_ref: \"AUTOSPRINT_20240726_1400_REFACTOR\"\n  completion_notes: \"Unit tests successfully updated for refactored service, achieving high coverage and validating new architecture.\"\n\n- id: \"087\"\n  original_id: \"TEST-1.2\"\n  title: \"Testing: Comprehensive Unit Test Coverage\"\n  objective: \"Ensure comprehensive unit test coverage for all critical backend components, including API routes, services, and utilities.\"\n  meta_task: \"Sprint: Project Finalization & Polish (AI Execution - Cline)\"\n  files: [\"tests/unit/\"]\n  depends: [\"086\", \"048\", \"049\"]\n  done_when: \"All critical backend modules have unit tests with >80% coverage. Tests cover happy paths, edge cases, and error handling.\"\n  status: done\n  ai_ref: \"CLINE_EXECUTION_20250529_2250\"\n  completion_notes: \"Comprehensive unit test coverage achieved for critical backend components.\"\n\n- id: \"088\"\n  original_id: \"STATIC-ANALYSIS-ALL\"\n  title: \"Testing: Static Analysis & Linting\"\n  objective: \"Perform a full static analysis and linting pass on the entire codebase (backend and frontend) and resolve all reported issues.\"\n  meta_task: \"Sprint: Project Finalization & Polish (AI Execution - Cline)\"\n  files: [\"app/\", \"frontend/src/\", \".flake8\", \"frontend/.eslintrc.cjs\"]\n  depends: [\"077\", \"065\"]\n  done_when: \"Linters (flake8, ruff, ESLint) and static analysis tools (mypy) report zero errors or warnings for the entire codebase.\"\n  status: done\n  ai_ref: \"CLINE_EXECUTION_20250530_0001\"\n  completion_notes: \"Full codebase linting and static analysis completed with all issues resolved.\"\n\n- id: \"089\"\n  original_id: \"E2E-USER-FLOW-STAGING\"\n  title: \"Testing: E2E User Flow Test on Staging\"\n  objective: \"Perform manual end-to-end testing of core user flows on a staging-like environment (local with production-similar config).\"\n  meta_task: \"Sprint: Project Finalization & Polish (AI Execution - Cline)\"\n  files: [\"reports/staging_e2e_results.md\"]\n  depends: [\"080\", \"058\", \"060\"]\n  done_when: \"Core user flows (registration, login, content generation, job status, feedback, logout) are tested successfully. Results documented in staging_e2e_results.md.\"\n  status: done\n  ai_ref: \"CLINE_EXECUTION_20250530_0810\"\n  completion_notes: \"End-to-end user flow testing completed successfully on a staging-like environment. Results documented.\"\n\n- id: \"090\"\n  original_id: \"GCP-1.A.3\"\n  title: \"Testing: Duplicate Docker Start Script\"\n  objective: \"Remove duplicate start.sh from root, keeping the one in docker/.\"\n  meta_task: \"Current Sprint: GCP-Native Serverless Architecture\"\n  files: [\"start.sh\", \"docker/start.sh\", \"Dockerfile\"]\n  depends: [\"040\"]\n  done_when: \"Root start.sh deleted. Dockerfile CMD uses docker/start.sh.\"\n  status: done\n  ai_ref: \"SESSION_PREVIOUS_STARTSH_DEDUPE\"\n  completion_notes: \"Duplicate start script resolved, ensuring single source of truth.\"\n\n- id: \"091\"\n  original_id: \"GCP-1.A.4\"\n  title: \"Testing: Duplicate Nginx Configuration\"\n  objective: \"Remove duplicate nginx.conf from root, keeping the one in docker/nginx/.\"\n  meta_task: \"Current Sprint: GCP-Native Serverless Architecture\"\n  files: [\"nginx.conf\", \"docker/nginx/nginx.conf\", \"Dockerfile\"]\n  depends: [\"054\"]\n  done_when: \"Root nginx.conf deleted. Dockerfile COPY uses docker/nginx/nginx.conf.\"\n  status: done\n  ai_ref: \"SESSION_PREVIOUS_NGINX_DEDUPE\"\n  completion_notes: \"Duplicate Nginx configuration resolved.\"\n\n# ================================================================================================\n# PHASE 9: DOCUMENTATION & FINAL POLISH\n# ================================================================================================\n\n- id: \"092\"\n  original_id: \"DOC-1.1\"\n  title: \"Documentation: Update Tasks & Project Rules\"\n  objective: \"Ensure all task management files (meta_tasks.md, atomic_tasks.yaml, task_details.md) and project rules (.cursor/rules/project.mdc, memory/guidelines.md) are up-to-date and reflect the final project state.\"\n  meta_task: \"Sprint: Project Finalization & Polish (AI Execution - Cline)\"\n  files: [\"tasks/\", \".cursor/rules/project.mdc\", \"memory/guidelines.md\"]\n  depends: [\"083\", \"075\"]\n  done_when: \"All task files and project rule documents are reviewed, updated to reflect completed work and final decisions, and are internally consistent.\"\n  status: done\n  ai_ref: \"CLINE_EXECUTION_20250530_0950\"\n  completion_notes: \"Task management files and project rules updated to reflect final project state.\"\n\n- id: \"093\"\n  original_id: \"DOC-1.2\"\n  title: \"Documentation: Update README.md\"\n  objective: \"Update the main README.md to accurately reflect the project's current state, features, setup instructions, and usage guidelines.\"\n  meta_task: \"Sprint: Project Finalization & Polish (AI Execution - Cline)\"\n  files: [\"README.md\"]\n  depends: [\"089\", \"084\"]\n  done_when: \"README.md is comprehensive, up-to-date, and provides clear guidance for users and developers.\"\n  status: done\n  ai_ref: \"CLINE_EXECUTION_20250530_0950\"\n  completion_notes: \"README.md updated with current project information and setup instructions.\"\n\n- id: \"094\"\n  original_id: \"FINAL-DOCS-REVIEW\"\n  title: \"Documentation: Final Review & Polish\"\n  objective: \"Perform a final review of all project documentation (user, developer, operational) for clarity, consistency, and completeness.\"\n  meta_task: \"Sprint: Project Finalization & Polish (AI Execution - Cline)\"\n  files: [\"docs/\", \"README.md\", \"CHANGELOG.md\"]\n  depends: [\"092\", \"093\"]\n  done_when: \"All project documentation is reviewed, polished, and deemed ready for project completion.\"\n  status: done\n  ai_ref: \"CLINE_EXECUTION_20250530_0950\"\n  completion_notes: \"Final documentation review and polish completed.\"\n\n# END OF REORGANIZED ATOMIC TASKS (094 total tasks)\n
